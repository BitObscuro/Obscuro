

enclave {

	include "sgx/sys/types.h"
	include "struct/sgx_syssocket_struct.h"

    untrusted	{
			
		/* sys/socket.h and socket.h wrapper function */
		int ocall_socket(int domain, int type, int protocol);
		int ocall_accept(int sockfd, [out] struct sockaddr *addr, [in, out] socklen_t *addrlen);
		int ocall_connect(int socket, [in] const struct sockaddr *address, socklen_t address_len);
		ssize_t ocall_sendto(int sockfd, [in, size=len]const void *buf, size_t len, int flags, [in, size=addrlen]const void *dest_addr, unsigned int addrlen);
		ssize_t ocall_recv(int fd, [out, size=len]void *buf, size_t len, int flags);
		ssize_t ocall_send(int fd, [in, size=len]const void *buf, size_t len, int flags);
		int ocall_socketpair(int domain, int type, int protocol, [out] int sv[2]);	
		int ocall_setsockopt(int sockfd, int level, int optname, [in, size=optlen]const void *optval, unsigned int optlen);
		int ocall_getsockopt(int sockfd, int level, int optname, [out, size=optlen]void *optval, [user_check]unsigned int *optlen);		
		int ocall_shutdown(int fd, int how);	
		int ocall_bind (int fd, [in, size=len] const struct sockaddr * addr, socklen_t len);
		int ocall_bind_untrusted(int fd, [user_check] const struct sockaddr * addr, socklen_t len);
		int ocall_listen (int fd, int n);
		int ocall_getsockname (int fd, [out] struct sockaddr * addr, [out] socklen_t *len);
		int ocall_getpeername (int fd, [out] struct sockaddr * addr, [out] socklen_t *len);
		ssize_t ocall_recvfrom (int fd, [out, size=n]void *buf, size_t n, int flags, [out] struct sockaddr * addr, [user_check]socklen_t *addr_len);
		ssize_t ocall_sendmsg (int fd, [in]const struct msghdr *message,
			int flags);
		ssize_t ocall_recvmsg (int fd, [out] struct msghdr *message, int flags);
    };

};
