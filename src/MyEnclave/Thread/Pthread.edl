/* Pthread.edl - Wrapper library for pthread in SGX - PreRequisite: EnclaveUtil/util.edl */

enclave {

 //   from "sgx_tstdc.edl" import sgx_thread_wait_untrusted_event_ocall, sgx_thread_set_untrusted_event_ocall, sgx_thread_setwait_untrusted_events_ocall, sgx_thread_set_multiple_untrusted_events_ocall;
    from "EnclaveUtil/util.edl" import ecall_set_enclave_id;
 	include "struct/sgx_pthread_struct.h"
    include "sgx_eid.h"

    trusted {
    	// public void ecall_set_enclave_id(sgx_enclave_id_t self_eid);
        public void ecall_execute_job(pthread_t pthread_self_id, unsigned long int job_id);  // , pthread_t pthread
    };

    untrusted {
        int ocall_pthread_create([user_check]pthread_t *new_thread,SGX_WRAPPER_PTHREAD_ATTRIBUTE __attr, unsigned long int job_id, sgx_enclave_id_t eid) allow (ecall_execute_job);
        pthread_t ocall_pthread_self(void);
        int ocall_pthread_join(pthread_t pt, [user_check] void **thread_result);
		int ocall_pthread_detach(pthread_t pt);
		int ocall_pthread_equal(pthread_t pt1, pthread_t pt2);
		void ocall_pthread_exit([user_check]void *retval);
        int ocall_pthread_cancel (pthread_t th);
        void ocall_pthread_testcancel (void);
        int ocall_pthread_attr_init([out, size=1] SGX_WRAPPER_PTHREAD_ATTRIBUTE *__attr);
        int ocall_pthread_attr_destroy(SGX_WRAPPER_PTHREAD_ATTRIBUTE __attr);
        int ocall_pthread_attr_getdetachstate(SGX_WRAPPER_PTHREAD_ATTRIBUTE __attr, [out, size=1]int *__detachstate);
        int ocall_pthread_attr_setdetachstate(SGX_WRAPPER_PTHREAD_ATTRIBUTE __attr, int __detachstate);
        int ocall_pthread_attr_getguardsize(SGX_WRAPPER_PTHREAD_ATTRIBUTE __attr, [in, size=1]size_t *__guardsize);
        int ocall_pthread_attr_setguardsize(SGX_WRAPPER_PTHREAD_ATTRIBUTE __attr, size_t __guardsize);
        int ocall_pthread_attr_getschedpolicy(SGX_WRAPPER_PTHREAD_ATTRIBUTE __attr, [in, size=1]int *__policy);
        int ocall_pthread_attr_setschedpolicy(SGX_WRAPPER_PTHREAD_ATTRIBUTE __attr, int __policy);
        int ocall_pthread_attr_getstacksize(SGX_WRAPPER_PTHREAD_ATTRIBUTE __attr, [in, size=1] size_t *__stacksize);
        int ocall_pthread_attr_setstacksize(SGX_WRAPPER_PTHREAD_ATTRIBUTE __attr, size_t __stacksize);
        int ocall_pthread_setspecific(pthread_key_t key, [user_check] const void *value);
        void * ocall_pthread_getspecific(pthread_key_t key);
        // int ocall_pthread_key_create([in, out] pthread_key_t *key, void (*destructor) (void*));
        int ocall_pthread_key_create([in, out] pthread_key_t *key, [user_check] void *destructor);

    };
};